<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Arroway!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>

    <section>
        <title>OO szemlélet</title>
        <para>
            A következő program objectum orientált ahogyan ezt a címben rövidítve (OO) is láthatjuk.
            Az OO programozás osztályokkal és objektumokkal fog dolgozni, jelen esetben létrehoz 10 
            véletlenszerű számot.
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.command/RubiMaistro/codes-prog2/tree/master/Arroway/PolarGen%20-%20random%20number%20generator">PolarGenerator</link>               
        </para>
        <para>
            A programot három fő részre lehet osztani, a főosztály azaz a main, a kisegítő mellék osztály és 
            ebben a generálást végző függvény.
        </para>
        <para>
            A programkód részekre bontva a következő:
        </para>

        <programlisting language="java"><![CDATA[
            class PolarGen {

                boolean nincsTarolt = true;
                double tarolt;
                
                /// Constructor .
                public PolarGen() {
                    nincsTarolt = true;
                }
            ]]></programlisting>

            <para>
                A PolarGen mellékosztály amelyben egy Constructort láthatunk, ez a függvény minden
                osztályban létrehozható és inicializálásokat lehet végrehajtani benne. Mivel ez a függvény 
                akkor fut le ha példányosítunk, azaz létrehozunk egy osztály objectumot, ezt majd a main részben, tesszük meg.
            </para>
            <para>
                A Constructor egy logikai változónak alapértéket definiál, jelen esetben igaz értéket.
                Az osztályban még létrehozunk egy double tipusú változót ami majd a generált számot fogja tartalmazni.
            </para>

            <programlisting language="java"><![CDATA[
                /// Generator .
                public double kovetkezo() {
                    
                    if(nincsTarolt) {
                        double n1, n2, v1, v2, s;
                        
                        do {
                            n1 = Math.random();			// nextDouble() /// .
                            n2 = Math.random();			// nextDouble()
                            
                            /// . from nextGaussian
                            
                            v1 = 2 * n1 - 1;			// v1 = 2 * nextDouble() - 1; 
                            v2 = 2 * n2 - 1;			// v2 = 2 * nextDouble() - 1; 
                            
                            s = n1 * n2 + v1 * v2;
                            
                        } while ( s > 1 );
                        
                        double r = Math.sqrt(( -2 * Math.log(s)) / s);
                        tarolt = r * v2;
                        nincsTarolt = !nincsTarolt;
                        return r * v1;
                    } else {
                    
                        nincsTarolt = !nincsTarolt;
                        return tarolt;
                    }
                }
                
            }
        ]]></programlisting>

        <para>
            A kovetkezo() nevű metódus matematikai számítás alapján hoz létre számokat. Az if elágazás eldönti, hogy
            van-e már legenerált szám, ha nincs akkor belép a ciklusba és létrehoz 2 változót aminek a random() függvénnyel 
            generál számot, majd jön a matematikai számítás a while() ciklusban hogy ha a szám nagyobb mint 1 akkor
            elvégez egy műveletet, majd értéket ad a tarolt nevű változónak. Majd a nincsTarolt valtozó logikai értékét megváltoztatja,
            aztán vissza ad egy számot a return kulcsszóval.
        </para>
        <para>
            Ha már volt generált szám akkor az else ágra lép, ahol a nincsTarolt valtozó logikai értékét megváltoztatja és
            vissza adja a tarolt valtozo értékét a return kulcsszóval.
        </para>


        <programlisting language="java"><![CDATA[
            public class PolarGenerator {
                
                public static void main(String[] args) {
                    
                    /// Instance .
                    PolarGen g = new PolarGen();
                    
                    for(int i=0; i<10; ++i)
                        System.out.println(g.kovetkezo());
                }
                
            }
        ]]></programlisting>

        <para>
            A PolarGenerator osztály, a főosztály, ahol a main() függvényben létrehoz egy a PolarGen osztályhoz tartozó példányt,
            a g nevű objektumot, majd egy for() ciklust indít, amely addig fut amíg 10 számot nem generált a kovetkezo() nevű metódussal, 
            s ezeket a számokat kiírja.
        </para>

        <para>
            A következő programcsipet a JDK beéített metódusa amely megtalálható 
            a java.util.Random forrásban a nextGaussian néven.
        </para>

        <programlisting language="java"><![CDATA[
            public class NextGuassian {
		
                private double nextNextGaussian;
                private boolean haveNextNextGaussian = false;

                public double nextGaussian() {
                if (haveNextNextGaussian) {
                    haveNextNextGaussian = false;
                    return nextNextGaussian;
                } else {
                    double n1, n2, v1, v2, s;
                    do {
                        n1 = Math.random();	/// nextDouble()
                        n2 = Math.random();
                        
                        v1 = 2 * n1 - 1;   // between -1.0 and 1.0
                        v2 = 2 * n2 - 1;   // between -1.0 and 1.0
                        s = v1 * v1 + v2 * v2;
                    } while (s >= 1 || s == 0);
                    double multiplier = StrictMath.sqrt(-2 * StrictMath.log(s)/s);
                    nextNextGaussian = v2 * multiplier;
                    haveNextNextGaussian = true;
                    return v1 * multiplier;
                    }
                }
            }
        ]]></programlisting>

        <para>
            Ebben a forrásban egy hasonló generálást láthatunk mint a kovetkezo() metódusban amit fent láthattunk, 
            de ez valamennyivel pontosabb számítást végez.
        </para>
        <mediaobject>
                <imageobject>
                    <imagedata fileref="img2/PolarGen.png" format="PNG" scale="60" />
                </imageobject>
        </mediaobject>

        <para>
            A követzkező program pedig ugyan az mint amit láthattunk feljebb csak C++ nyelven:
        </para>
        <para>
            Link: <link xlink:href="https://github.command/RubiMaistro/codes-prog2/blob/master/Arroway/PolarGen%20-%20random%20number%20generator/PolarGen.cpp">
            https://github.command/RubiMaistro/codes-prog2/blob/master/Arroway/PolarGen.cpp</link>
        </para>



    </section>        


    <section>
        <title>Gagyi</title>
    
        <para>
            Megoldás forrása: <link xlink:href="https://github.command/RubiMaistro/codes-prog2/tree/master/Arroway/Gagyi%20-%20java%20Integer%20range">
            Gagyi</link>             
        </para>

        <para>
            Érdekesség a javaról:
        </para>
        <para>
            A java feltételezi hogy kis számokat kell használnia ezért futáskor létrehoz a Thread pooljában egy rész tárhelyet, 
            amelybe -128-tól 127-ig fog eltárolni összesen 255 egész számot és mindegyikhez rendel egy memóriacímet.
        </para>
        <para>
            Ha a -128 és 127 közötti intervallumból szeretnénk értéket adni egy változónak, akkor az előre eltárolt pool-ból 
            fog hozzá memória címet rendelni. Amikor megtörténik a kérés, a java meghívja az Integer.value.of függvényt amely 
            kiosztja a memóriacímet.
        </para>
        <para>
            Ha ezen tartományon kívül rendelünk értéket a változóhoz, például -129-et vagy akár 128-at akkor ugyan ez a függvény 
            létrehoz egy új objektumot. 
        </para>
        <para>
            Ezek alapján ha x és t változó értéke egyenlő és ezen értéke az adott tartományon belül vannak, akkor azonos lesz a két változó címe. 
            Viszont ha x és t értéke azonos, de nem a -128 és 127 tartományból lesz, akkor a két változó címe nem fog megegyezni, mivel két külön 
            objektum fog létrejönni ezeknek a számoknak.
        </para>

        <para>
            Első esetben: 
        </para>

        <programlisting language="java"><![CDATA[
            public class Gagyi {

                public static void main(String[] args) {
                    
                    Integer x = -128;
                    Integer t = -128;
                    
                    System.out.println (x);
                    System.out.println (t);
                    
                    int a = 0;
                    
                    do {
                        a = a + 1;
                        System.out.println(a);
                    } while(x <= t && x >= t && t != x);
                }
            }
        ]]></programlisting>
        
        <mediaobject>
                <imageobject>
                    <imagedata fileref="img2/Gagyi_egyszer.png" format="PNG" scale="60" />
                </imageobject>
        </mediaobject>
        <para>
            Nem kerül a program végtelen ciklusba mert a feltétel nem teljesül, mivel a tartományon belül esik a két szám értéke, 
            ezért azonos a két szám memóriacíme, az előre eltárolt poolnak köszönhetően. (Tartomány: -128 - 127)
        </para>
        <para>
            Viszont láthatjuk a Consoleban egy 1-est mivel hátultesztelő, azaz végfeltételes ciklust használunk a programban, 
            ez elősegíti azt hogy már Consoleban észleljük, hogy nincs végtelen ciklus, tehát az "a" lépegető változó csak egy 
            futást fog számolni, majd kiirja.
        </para>
        <para>
            Második esetben:
        </para>

        <programlisting language="java"><![CDATA[
            public class Gagyi_out_range {

                public static void main(String[] args) {
                    
                    Integer x = -129;
                    Integer t = -129;
                    
                    System.out.println (x);
                    System.out.println (t);
                    
                    int a = 0;
                    
                    do {
                        a = a + 1;
                        System.out.println(a);
                    } while(x <= t && x >= t && t != x);
                }
            }
         ]]></programlisting>

         <mediaobject>
                <imageobject>
                    <imagedata fileref="img2/Gagyi_vegtelen.png" format="PNG" scale="60" />
                </imageobject>
        </mediaobject>
        
         <para>
             Amikor teljesül a while() feltétele és végtelen ciklusba kerül, mivel az Integer tipusú változók értéke 
             az előre definiált pool tartományon kívül esik. (Tartomány: -128 - 127)
         </para>
         <para>
            Ebben a programban már láthatjuk is a végtelen ciklust a Consoleban is, mivel szintén az "a" változó értéke minden ciklus lefutás 
            után növekszik eggyel.
         </para>

    </section>   


    <section>
        <title>Yoda Conditions</title>
        <para>
            Ez egy programozási szintaxis.
        </para>
        <para>
            A nevét a Csillagok Háborújábol ismert Yoda mesterről kapta, aki másképp beszéli az angolt, mivel nem 
            szokványosan beszéli az angol nyelvet, hanem a szavakat mondattanilag helytelenül használja. 
            Tehát felcseréli a szavak sorrendjét, viszont ettől eltekintve még érthető amit mondani akar.
        </para>
        <para>
            Példa egy mondatra és Yoda mester aranyköpésére:
        </para>
        <para>
            You have becommande powerful, I sense the dark side in you.
        </para>
        <para>
            Becommande powerful you have, the dark side in you I sense.
        </para>
        <para>
            Yoda Master Conditions Generator: <link xlink:href="https://lingojam.command/EnglishtoYoda">https://lingojam.command/EnglishtoYoda</link>
        </para>
        <para>
            Ezt átvihetjük a programozásba is, mivel a java lehetővé teszi. A továbbiakban példát láthatunk ilyen fajta 
            programozási szintaxisra is.
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.command/RubiMaistro/codes-prog2/tree/master/Arroway/Yoda%20Conditions">Yoda Condition</link>
        </para>
        <para>
            A program ami java.lang.NullPointerEx-el leáll, ha nem követjük a Yodaconditionst:
        </para>
        <programlisting language="java"><![CDATA[
            public class Yoda {

                public static void main(String[] args) {
                    
                    String peldastring = null;
                        
                    if (peldastring.equals("example")){
                        System.out.println("code example");
                    }          
                }          
            }
         ]]></programlisting>

         <para>
            A programban az összehasonlító kifejezésben megcseréljük a változót és a konstanst. 
            Eredetileg a konstanshoz hasonlítjuk a változót, azaz a konstans a bal míg a változó a 
            jobb oldalon helyeszkedik el. De a Yoda feltételek szerint fordítva, azaz a konstans lesz a 
            jobb oldalon és a változó a bal oldalon. 
        </para>
        <mediaobject>
                <imageobject>
                    <imagedata fileref="img2/Yoda.png" format="PNG" scale="60" />
                </imageobject>
        </mediaobject>
         <para>
            A java nem képes String tipust összehasonlitani null tipussal, ezért dob hibát. Ezzel a módszerrel 
            elkerülhetjük a null Stringeket.
         </para>

    </section> 


    <section>
        <title>EPAM: Java Object metódusok</title>
        <para>
            A javaban találhatunk beéített Object metódusokat amelyeket szabadon használhatunk,
            de ha számunkra egy picit mást szeretnénk hogy végezzen akkor átírhatjuk, azaz felülírhatjuk
            a programunkban a már beéített metódust.
        </para>
        <para>
            Nem minden esetben helyes számunkra az előre definiált metódus, mert nem biztos hogy optimálisan
            fog működni a programunk. Ekkor ajánlott és kötelező is felüldefiniálni a metódust.
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.command/RubiMaistro/codes-prog2/blob/master/EPAM/Java%20Obj%20Methods/Ember.java">Java Object Methods</link>              
        </para>
        <programlisting language="java"><![CDATA[
            public class Methods {
        
                public Methods() {
                    System.out.println("Methods Constructor.");
                }

                @Override
                public String toString() {
                    System.out.println("Methods: " + getClass().getName() + ", toString()=" + super.toString());
                    return "";
                }

                @Override
                public int hashCode() {
                    return super.hashCode();
                }

                @Override
                public boolean equals(Object obj) {
                    return super.equals(obj);
                }

                @Override
                protected Object clone() throws CloneNotSupportedException {
                    return super.clone();
                }

                @Override
                protected void finalize() throws Throwable {
                    
                }
            }
        ]]></programlisting>
    
        <para>
            A fenti kódban létrehoztunk egy Methods nevű osztályt amiben függvények vannak.
            Majd minden beéített függvény előtt egy Override kulcsszót, amely azt jelenti hogy az utána
            következő beéített függvény a programban felüldefiniált.
        </para>
        <para>
            Mivel az osztályban nincs létrehozva az egy Constructoron kívül semmi más, ezért a beéített függvényeket
            nincs értelme felüldefiniálni. Ez a progam csak egy osztálynak a váza.
        </para>
        <para>
            Amikor egy osztályban több változót és függvényt hozunk létre akkor bizonyos metódusokat érdemes felüldefiniálni.
        </para>
        <para>
            Például a hashCode() függvényt érdemes felüldefiniálni mivel minden objektumnak más kell legyen a hash kódja. Ebben az
            esetben ha egy hashcode alapú mapel dolgozunk akkor a felüldefiniálással elkerülhetjük az objektumok összekeverését.
        </para>
        <programlisting language="java"><![CDATA[
            public class Main {

                public static void main(String[] args) {
                    
                    Methods obj = new Methods();
                    Methods obj1 = new Methods();
                    
                    obj.toString();
                    System.out.println(obj.getClass());
                    System.out.println(obj.equals(obj1)); // összehasonlitja a hash kódokat
                    
                    System.out.println(obj.hashCode());
                    System.out.println(obj1.hashCode());
                }
            }
        ]]></programlisting>
        <para>
            A main() osztályban létrehozunk objektumokat és meghívjuk a definiált függvényeket.
        </para>
            <para>
                Komplexebb program a beéített függvényekkel: 
                <link xlink:href="https://github.command/RubiMaistro/codes-prog2/blob/master/EPAM/Java%20Obj%20Methods/Ember.java">
                https://github.command/RubiMaistro/codes-prog2/blob/master/EPAM/Java%20Obj%20Methods/Ember.java</link>
            </para>
        <para>
            A beípitett függvények optimalizálás okának a magyarázata:
        </para>
        <para>
            A hashCode() metódus. Minden objektum és változó amit létrehozunk rendelkezik egy azonsoítóval, ezt nevezzük hash kódnak. 
            (Egy komplex programban mindenképp felül kell definiálni a metódust, hogy optimálisan működjön a programra nézve.)
        </para>
        <para>
            A toString() metódus. A függvény standard visszatérési értéke: class packageNév.osztalyNév és hash kód. 
        </para>
        <para>
            Ha változtatni szeretnénk a visszatérési értékén, akkor érdemes felüldefiniálni.
        </para>
        <para>
            Az equals() metódus. Ez a függvény az összehasonlító függvény. Tehát ahogyan a hash kódnál úgy itt is, ha már a program 
            komplex akkor több a hibalehetőség, így érdemes a programhoz optimalizálni. 
        </para>
        <para>
            A clone() metódus. Ez a függvény képes lemásolni egy objektumot teljesen, hogy a hash kódja is teljesen megegyezik
            a másolandó objektuméval. 
        </para>
        <para>
            A wait() metódus. Arra kényszeríti az aktuális processzor szálat hogy megvárjon egy másikat amíg az nem végez.
        </para>
        <para>
            A notify() és notifyAll() metódusok. Az első egyet a második pedig az összes várakozó szálat felébreszti amelyeket a wait()
            függvénnyel várakoztatunk a programban.
        </para>
        <para>
            Lássunk példát egy néhány beépített java object metódusra:
        </para>
        <mediaobject>
                <imageobject>
                    <imagedata fileref="img2/OBJMethods.png" format="PNG" scale="50" />
                </imageobject>
        </mediaobject>
        <para>
            Részletesen a metódusok felüldefiniálásánál (Override) lehet követni a függvények működését, a linkben megtalálható a részletes programkód.
        </para>
    </section>    
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   
</chapter>                
